name: Deploy Terraform state backend

on:
  push:
    branches: none # [ main ]
  pull_request:
    branches:  none # [ release ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  LOCATION: eastus2
  INFRA_RESOURCE_GROUP: tfstate-resourcegroup
  TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage405
  TF_STATE_CONTAINER_NAME: tfstate
  TF_STATE_FILE_NAME: tfstate
  TF_STATE_ACCESS_KEY: "" # will be set later
    
  #DOCKER_REPOSITORY: acrforaks102.azurecr.io
  # DOCKER_REPOSITORY: houssemdocker
  #IMAGE_NAME: webapp
  #IMAGE_TAG: ${{ github.run_number }}
  
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  AKS_RESOURCE_GROUP: aks-102-rg
  #AKS_NAME: aks-102
  #ACR_NAME: acrforaks102
  #SQL_INSTANCE_NAME: sqlforaks102
  #DB_ADMIN_LOGIN: houssem
  #DB_ADMIN_PASSWORD: "@Aa123456"
  #STORAGE_NAME: storageforaks102

jobs:
  deploy:
    name: 'Deploy Terraform state backend'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Set short git commit SHA
        id:   commit
        uses: prompt/actions-commit-hash@v2

      - name: Checkout
        uses: actions/checkout@v2

      - name: 'Login to  Azure'
        uses: azure/login@v1   
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.58
          inlineScript: |  
            # Create the resource group
            az group create -n $INFRA_RESOURCE_GROUP -l $LOCATION          
            # Create the storage account
            az storage account create -g $INFRA_RESOURCE_GROUP -l $LOCATION \
            --name $TF_STATE_STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob
            # Retrieve the storage account key
            ACCOUNT_KEY=$(az storage account keys list --resource-group $INFRA_RESOURCE_GROUP --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)
            # Create a storage container (for the Terraform State)
            az storage container create --name $TF_STATE_CONTAINER_NAME --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

            echo "TF_STATE_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
             
      - name: Login to Azure with SPN
        uses: azure/CLI@v1
        with:
          azcliversion: 2.27.2
          inlineScript: |
           az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
    
      - name: Replace Variables in terraform.tfvars
        uses: datamonsters/replace-action@v2
        with:
          files: ./terraform.tfvars
          replacements: '__AKS_RESOURCE_GROUP__=${{ env.AKS_RESOURCE_GROUP }},__AKS_NAME__=${{ env.AKS_NAME }},__ACR_NAME__=${{ env.ACR_NAME }},__SQL_INSTANCE_NAME__=${{ env.SQL_INSTANCE_NAME }},__DB_ADMIN_LOGIN__=${{ env.DB_ADMIN_LOGIN }},__DB_ADMIN_PASSWORD__=${{ env.DB_ADMIN_PASSWORD }},__STORAGE_NAME__=${{ env.STORAGE_NAME }}'
       
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            terraform_version: 1.8.0
  
      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        #working-directory: ./
        continue-on-error: true
      
      - name: Terraform Init (Azure Backend)
        id: init
        run: terraform init
              -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME"
              -backend-config="container_name=$TF_STATE_CONTAINER_NAME"
              -backend-config="access_key=$TF_STATE_ACCESS_KEY"
              -backend-config="key=$TF_STATE_FILE_NAME"
        #working-directory: ./
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        #working-directory: infra
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -out out.plan -var-file="terraform.tfvars"
        #working-directory: infra
        continue-on-error: true
        
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve out.plan
        #working-directory: infra

        